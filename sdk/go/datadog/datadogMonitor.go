// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog monitor resource. This can be used to create and manage Datadog monitors.
type DatadogMonitor struct {
	s *pulumi.ResourceState
}

// NewDatadogMonitor registers a new resource with the given unique name, arguments, and options.
func NewDatadogMonitor(ctx *pulumi.Context,
	name string, args *DatadogMonitorArgs, opts ...pulumi.ResourceOpt) (*DatadogMonitor, error) {
	if args == nil || args.Message == nil {
		return nil, errors.New("missing required argument 'Message'")
	}
	if args == nil || args.Query == nil {
		return nil, errors.New("missing required argument 'Query'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["escalationMessage"] = nil
		inputs["evaluationDelay"] = nil
		inputs["includeTags"] = nil
		inputs["locked"] = nil
		inputs["message"] = nil
		inputs["name"] = nil
		inputs["newHostDelay"] = nil
		inputs["noDataTimeframe"] = nil
		inputs["notifyAudit"] = nil
		inputs["notifyNoData"] = nil
		inputs["query"] = nil
		inputs["renotifyInterval"] = nil
		inputs["requireFullWindow"] = nil
		inputs["silenced"] = nil
		inputs["tags"] = nil
		inputs["thresholds"] = nil
		inputs["timeoutH"] = nil
		inputs["type"] = nil
	} else {
		inputs["escalationMessage"] = args.EscalationMessage
		inputs["evaluationDelay"] = args.EvaluationDelay
		inputs["includeTags"] = args.IncludeTags
		inputs["locked"] = args.Locked
		inputs["message"] = args.Message
		inputs["name"] = args.Name
		inputs["newHostDelay"] = args.NewHostDelay
		inputs["noDataTimeframe"] = args.NoDataTimeframe
		inputs["notifyAudit"] = args.NotifyAudit
		inputs["notifyNoData"] = args.NotifyNoData
		inputs["query"] = args.Query
		inputs["renotifyInterval"] = args.RenotifyInterval
		inputs["requireFullWindow"] = args.RequireFullWindow
		inputs["silenced"] = args.Silenced
		inputs["tags"] = args.Tags
		inputs["thresholds"] = args.Thresholds
		inputs["timeoutH"] = args.TimeoutH
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("datadog:index/datadogMonitor:DatadogMonitor", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatadogMonitor{s: s}, nil
}

// GetDatadogMonitor gets an existing DatadogMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatadogMonitor(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatadogMonitorState, opts ...pulumi.ResourceOpt) (*DatadogMonitor, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["escalationMessage"] = state.EscalationMessage
		inputs["evaluationDelay"] = state.EvaluationDelay
		inputs["includeTags"] = state.IncludeTags
		inputs["locked"] = state.Locked
		inputs["message"] = state.Message
		inputs["name"] = state.Name
		inputs["newHostDelay"] = state.NewHostDelay
		inputs["noDataTimeframe"] = state.NoDataTimeframe
		inputs["notifyAudit"] = state.NotifyAudit
		inputs["notifyNoData"] = state.NotifyNoData
		inputs["query"] = state.Query
		inputs["renotifyInterval"] = state.RenotifyInterval
		inputs["requireFullWindow"] = state.RequireFullWindow
		inputs["silenced"] = state.Silenced
		inputs["tags"] = state.Tags
		inputs["thresholds"] = state.Thresholds
		inputs["timeoutH"] = state.TimeoutH
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("datadog:index/datadogMonitor:DatadogMonitor", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatadogMonitor{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatadogMonitor) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatadogMonitor) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A message to include with a re-notification. Supports the '@username'
// notification allowed elsewhere.
func (r *DatadogMonitor) EscalationMessage() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["escalationMessage"])
}

func (r *DatadogMonitor) EvaluationDelay() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["evaluationDelay"])
}

// A boolean indicating whether notifications from this monitor will automatically insert its
func (r *DatadogMonitor) IncludeTags() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["includeTags"])
}

// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
func (r *DatadogMonitor) Locked() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["locked"])
}

// A message to include with notifications for this monitor.
// Email notifications can be sent to specific users by using the same '@username' notation as events.
func (r *DatadogMonitor) Message() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["message"])
}

// Name of Datadog monitor
func (r *DatadogMonitor) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Time (in seconds) to allow a host to boot and
// applications to fully start before starting the evaluation of monitor
// results. Should be a non negative integer. Defaults to 300.
// * `evaluation_delay` (Optional, only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
// For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00,
// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
// metrics to ensure the monitor will always have data during evaluation.
func (r *DatadogMonitor) NewHostDelay() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["newHostDelay"])
}

// The number of minutes before a monitor will notify when data stops reporting. Must be at
// least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Default: 2x timeframe for
// metric alerts, 2 minutes for service checks.
func (r *DatadogMonitor) NoDataTimeframe() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["noDataTimeframe"])
}

// A boolean indicating whether tagged users will be notified on changes to this monitor.
// Defaults to false.
func (r *DatadogMonitor) NotifyAudit() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifyAudit"])
}

// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
// to false.
func (r *DatadogMonitor) NotifyNoData() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifyNoData"])
}

// The monitor query to notify on. Note this is not the same query you see in the UI and
// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/?lang=python#create-a-monitor) for details. **Warning:** `terraform plan` won't perform any validation of the query contents.
func (r *DatadogMonitor) Query() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["query"])
}

// The number of minutes after the last notification before a monitor will re-notify
// on the current status. It will only re-notify if it's not resolved.
func (r *DatadogMonitor) RenotifyInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["renotifyInterval"])
}

// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
func (r *DatadogMonitor) RequireFullWindow() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requireFullWindow"])
}

// Each scope will be muted until the given POSIX timestamp or forever if the value is 0.
// To mute the alert completely:
func (r *DatadogMonitor) Silenced() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["silenced"])
}

// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
func (r *DatadogMonitor) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// 
// * Metric alerts:
// A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
// Example usage:
// ```
// thresholds {
// critical          = 90
// critical_recovery = 85
// warning           = 80
// warning_recovery  = 75
// }
// ```
// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
// * Service checks:
// A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
// Default values:
// ```
// thresholds {
// ok       = 1
// critical = 1
// warning  = 1
// unknown  = 1
// }
// ```
func (r *DatadogMonitor) Thresholds() *pulumi.Output {
	return r.s.State["thresholds"]
}

// The number of hours of the monitor not reporting data before it will automatically resolve
// from a triggered state. Defaults to false.
func (r *DatadogMonitor) TimeoutH() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeoutH"])
}

// The type of the monitor, chosen from:
// * `metric alert`
// * `service check`
// * `event alert`
// * `query alert`
// * `composite`
// * `log alert`
func (r *DatadogMonitor) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering DatadogMonitor resources.
type DatadogMonitorState struct {
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage interface{}
	EvaluationDelay interface{}
	// A boolean indicating whether notifications from this monitor will automatically insert its
	IncludeTags interface{}
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked interface{}
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message interface{}
	// Name of Datadog monitor
	Name interface{}
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	// * `evaluation_delay` (Optional, only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	NewHostDelay interface{}
	// The number of minutes before a monitor will notify when data stops reporting. Must be at
	// least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Default: 2x timeframe for
	// metric alerts, 2 minutes for service checks.
	NoDataTimeframe interface{}
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit interface{}
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData interface{}
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/?lang=python#create-a-monitor) for details. **Warning:** `terraform plan` won't perform any validation of the query contents.
	Query interface{}
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval interface{}
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow interface{}
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0.
	// To mute the alert completely:
	Silenced interface{}
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags interface{}
	// 
	// * Metric alerts:
	// A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	// Example usage:
	// ```
	// thresholds {
	// critical          = 90
	// critical_recovery = 85
	// warning           = 80
	// warning_recovery  = 75
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	// A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	// Default values:
	// ```
	// thresholds {
	// ok       = 1
	// critical = 1
	// warning  = 1
	// unknown  = 1
	// }
	// ```
	Thresholds interface{}
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH interface{}
	// The type of the monitor, chosen from:
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type interface{}
}

// The set of arguments for constructing a DatadogMonitor resource.
type DatadogMonitorArgs struct {
	// A message to include with a re-notification. Supports the '@username'
	// notification allowed elsewhere.
	EscalationMessage interface{}
	EvaluationDelay interface{}
	// A boolean indicating whether notifications from this monitor will automatically insert its
	IncludeTags interface{}
	// A boolean indicating whether changes to to this monitor should be restricted to the creator or admins. Defaults to False.
	Locked interface{}
	// A message to include with notifications for this monitor.
	// Email notifications can be sent to specific users by using the same '@username' notation as events.
	Message interface{}
	// Name of Datadog monitor
	Name interface{}
	// Time (in seconds) to allow a host to boot and
	// applications to fully start before starting the evaluation of monitor
	// results. Should be a non negative integer. Defaults to 300.
	// * `evaluation_delay` (Optional, only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	// For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00,
	// the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled
	// metrics to ensure the monitor will always have data during evaluation.
	NewHostDelay interface{}
	// The number of minutes before a monitor will notify when data stops reporting. Must be at
	// least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. Default: 2x timeframe for
	// metric alerts, 2 minutes for service checks.
	NoDataTimeframe interface{}
	// A boolean indicating whether tagged users will be notified on changes to this monitor.
	// Defaults to false.
	NotifyAudit interface{}
	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults
	// to false.
	NotifyNoData interface{}
	// The monitor query to notify on. Note this is not the same query you see in the UI and
	// the syntax is different depending on the monitor `type`, please see the [API Reference](https://docs.datadoghq.com/api/?lang=python#create-a-monitor) for details. **Warning:** `terraform plan` won't perform any validation of the query contents.
	Query interface{}
	// The number of minutes after the last notification before a monitor will re-notify
	// on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval interface{}
	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	// We highly recommend you set this to False for sparse metrics, otherwise some evaluations will be skipped.
	// Default: True for "on average", "at all times" and "in total" aggregation. False otherwise.
	RequireFullWindow interface{}
	// Each scope will be muted until the given POSIX timestamp or forever if the value is 0.
	// To mute the alert completely:
	Silenced interface{}
	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags interface{}
	// 
	// * Metric alerts:
	// A dictionary of thresholds by threshold type. Currently we have four threshold types for metric alerts: critical, critical recovery, warning, and warning recovery. Critical is defined in the query, but can also be specified in this option. Warning and recovery thresholds can only be specified using the thresholds option.
	// Example usage:
	// ```
	// thresholds {
	// critical          = 90
	// critical_recovery = 85
	// warning           = 80
	// warning_recovery  = 75
	// }
	// ```
	// **Warning:** the `critical` threshold value must match the one contained in the `query` argument. The `threshold` from the previous example is valid along with a query like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 90` but
	// along with something like `avg(last_1h):avg:system.disk.in_use{role:sqlserver} by {host} > 95` would make the Datadog API return a HTTP error 400, complaining "The value provided for parameter 'query' is invalid".
	// * Service checks:
	// A dictionary of thresholds by status. Because service checks can have multiple thresholds, we don't define them directly in the query.
	// Default values:
	// ```
	// thresholds {
	// ok       = 1
	// critical = 1
	// warning  = 1
	// unknown  = 1
	// }
	// ```
	Thresholds interface{}
	// The number of hours of the monitor not reporting data before it will automatically resolve
	// from a triggered state. Defaults to false.
	TimeoutH interface{}
	// The type of the monitor, chosen from:
	// * `metric alert`
	// * `service check`
	// * `event alert`
	// * `query alert`
	// * `composite`
	// * `log alert`
	Type interface{}
}
