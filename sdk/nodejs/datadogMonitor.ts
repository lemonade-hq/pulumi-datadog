// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatadogMonitor extends pulumi.CustomResource {
    /**
     * Get an existing DatadogMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatadogMonitorState, opts?: pulumi.CustomResourceOptions): DatadogMonitor {
        return new DatadogMonitor(name, <any>state, { ...opts, id: id });
    }

    public readonly escalationMessage: pulumi.Output<string | undefined>;
    public readonly evaluationDelay: pulumi.Output<number>;
    public readonly includeTags: pulumi.Output<boolean | undefined>;
    public readonly locked: pulumi.Output<boolean | undefined>;
    public readonly message: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly newHostDelay: pulumi.Output<number | undefined>;
    public readonly noDataTimeframe: pulumi.Output<number | undefined>;
    public readonly notifyAudit: pulumi.Output<boolean | undefined>;
    public readonly notifyNoData: pulumi.Output<boolean | undefined>;
    public readonly query: pulumi.Output<string>;
    public readonly renotifyInterval: pulumi.Output<number | undefined>;
    public readonly requireFullWindow: pulumi.Output<boolean | undefined>;
    public readonly silenced: pulumi.Output<{[key: string]: number} | undefined>;
    public readonly tags: pulumi.Output<string[] | undefined>;
    public readonly thresholds: pulumi.Output<{ critical?: number, criticalRecovery?: number, ok?: number, unknown?: number, warning?: number, warningRecovery?: number } | undefined>;
    public readonly timeoutH: pulumi.Output<number | undefined>;
    public readonly type: pulumi.Output<string>;

    /**
     * Create a DatadogMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatadogMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatadogMonitorArgs | DatadogMonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DatadogMonitorState = argsOrState as DatadogMonitorState | undefined;
            inputs["escalationMessage"] = state ? state.escalationMessage : undefined;
            inputs["evaluationDelay"] = state ? state.evaluationDelay : undefined;
            inputs["includeTags"] = state ? state.includeTags : undefined;
            inputs["locked"] = state ? state.locked : undefined;
            inputs["message"] = state ? state.message : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["newHostDelay"] = state ? state.newHostDelay : undefined;
            inputs["noDataTimeframe"] = state ? state.noDataTimeframe : undefined;
            inputs["notifyAudit"] = state ? state.notifyAudit : undefined;
            inputs["notifyNoData"] = state ? state.notifyNoData : undefined;
            inputs["query"] = state ? state.query : undefined;
            inputs["renotifyInterval"] = state ? state.renotifyInterval : undefined;
            inputs["requireFullWindow"] = state ? state.requireFullWindow : undefined;
            inputs["silenced"] = state ? state.silenced : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["thresholds"] = state ? state.thresholds : undefined;
            inputs["timeoutH"] = state ? state.timeoutH : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DatadogMonitorArgs | undefined;
            if (!args || args.message === undefined) {
                throw new Error("Missing required property 'message'");
            }
            if (!args || args.query === undefined) {
                throw new Error("Missing required property 'query'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["escalationMessage"] = args ? args.escalationMessage : undefined;
            inputs["evaluationDelay"] = args ? args.evaluationDelay : undefined;
            inputs["includeTags"] = args ? args.includeTags : undefined;
            inputs["locked"] = args ? args.locked : undefined;
            inputs["message"] = args ? args.message : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["newHostDelay"] = args ? args.newHostDelay : undefined;
            inputs["noDataTimeframe"] = args ? args.noDataTimeframe : undefined;
            inputs["notifyAudit"] = args ? args.notifyAudit : undefined;
            inputs["notifyNoData"] = args ? args.notifyNoData : undefined;
            inputs["query"] = args ? args.query : undefined;
            inputs["renotifyInterval"] = args ? args.renotifyInterval : undefined;
            inputs["requireFullWindow"] = args ? args.requireFullWindow : undefined;
            inputs["silenced"] = args ? args.silenced : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["thresholds"] = args ? args.thresholds : undefined;
            inputs["timeoutH"] = args ? args.timeoutH : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        super("datadog:index/datadogMonitor:DatadogMonitor", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatadogMonitor resources.
 */
export interface DatadogMonitorState {
    readonly escalationMessage?: pulumi.Input<string>;
    readonly evaluationDelay?: pulumi.Input<number>;
    readonly includeTags?: pulumi.Input<boolean>;
    readonly locked?: pulumi.Input<boolean>;
    readonly message?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly newHostDelay?: pulumi.Input<number>;
    readonly noDataTimeframe?: pulumi.Input<number>;
    readonly notifyAudit?: pulumi.Input<boolean>;
    readonly notifyNoData?: pulumi.Input<boolean>;
    readonly query?: pulumi.Input<string>;
    readonly renotifyInterval?: pulumi.Input<number>;
    readonly requireFullWindow?: pulumi.Input<boolean>;
    readonly silenced?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly thresholds?: pulumi.Input<{ critical?: pulumi.Input<number>, criticalRecovery?: pulumi.Input<number>, ok?: pulumi.Input<number>, unknown?: pulumi.Input<number>, warning?: pulumi.Input<number>, warningRecovery?: pulumi.Input<number> }>;
    readonly timeoutH?: pulumi.Input<number>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatadogMonitor resource.
 */
export interface DatadogMonitorArgs {
    readonly escalationMessage?: pulumi.Input<string>;
    readonly evaluationDelay?: pulumi.Input<number>;
    readonly includeTags?: pulumi.Input<boolean>;
    readonly locked?: pulumi.Input<boolean>;
    readonly message: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly newHostDelay?: pulumi.Input<number>;
    readonly noDataTimeframe?: pulumi.Input<number>;
    readonly notifyAudit?: pulumi.Input<boolean>;
    readonly notifyNoData?: pulumi.Input<boolean>;
    readonly query: pulumi.Input<string>;
    readonly renotifyInterval?: pulumi.Input<number>;
    readonly requireFullWindow?: pulumi.Input<boolean>;
    readonly silenced?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly thresholds?: pulumi.Input<{ critical?: pulumi.Input<number>, criticalRecovery?: pulumi.Input<number>, ok?: pulumi.Input<number>, unknown?: pulumi.Input<number>, warning?: pulumi.Input<number>, warningRecovery?: pulumi.Input<number> }>;
    readonly timeoutH?: pulumi.Input<number>;
    readonly type: pulumi.Input<string>;
}
